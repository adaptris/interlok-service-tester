ext {
  componentName='Interlok Service Tester/Wiremock'
  componentDesc="Wiremock boostrapper for service-tester"
  jacksonVersion='2.12.4'
}

dependencies {
  api project(":interlok-service-tester")
  api ("com.github.tomakehurst:wiremock-jre8:2.29.0") {
    exclude group: 'com.google.guava', module: 'guava'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
  }
  api ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
  api ("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
  api ("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
  implementation ("com.google.guava:guava:30.1.1-jre")
  // Custom service-tester taglets
  javadoc project(":interlok-service-tester")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = 'examples'
  from new File(buildDir, '/examples')
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}
artifacts {
  archives javadocJar
  archives sourcesJar
  archives examplesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact sourcesJar { classifier "sources" }
      artifact examplesJar { classifier "examples" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/pages/service-tester/service-tester-introduction")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.10.0+")
        properties.appendNode("tags", "testing,services")
        properties.appendNode("license", "false")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-service-tester")
        properties.appendNode("readme", "https://raw.githubusercontent.com/adaptris/interlok-service-tester/develop/README.md")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

javadoc {
  onlyIf {
    !hasGraphViz()
  }
  configure(options) {
    options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
    options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet", "com.adaptris.taglet.JUnitTaglet", "com.adaptris.taglet.ServiceTestTaglet"]
    options.tags('apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:','implNote:a:Implementation Note:')
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addBooleanOption "-no-module-directories", true
    options.group ("Service Tester - Entry Point", ["com.adaptris.tester.runners.*" , "com.adaptris.tester.runners"]).
      group ("Service Tester - Report Configuration and Creation", ["com.adaptris.tester.report.junit.*" , "com.adaptris.tester.report.junit"]).
      group ("Service Tester - Runtime Configuration and Execution", ["com.adaptris.tester.runtime.*" , "com.adaptris.tester.runtime"]).
      group ("Service Tester - Utilities", ["com.adaptris.tester.utils.*" , "com.adaptris.tester.utils"])
    exclude "com/adaptris/taglet/**"
  }

}

task umlJavadoc(type: Javadoc) {
  group 'Documentation'
  description 'Build javadocs using plantuml + graphviz + umldoclet, if dot is available'

  onlyIf {
    hasGraphViz()
  }
  source = sourceSets.main.allJava
  classpath = project.sourceSets.main.compileClasspath
  configure(options) {
    options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
    options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
    options.docletpath = configurations.umlDoclet.files.asType(List)
    options.tags('apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:','implNote:a:Implementation Note:')
    options.doclet = "nl.talsmasoftware.umldoclet.UMLDoclet"
    options.group ("Service Tester - Entry Point", ["com.adaptris.tester.runners.*" , "com.adaptris.tester.runners"]).
      group ("Service Tester - Report Configuration and Creation", ["com.adaptris.tester.report.junit.*" , "com.adaptris.tester.report.junit"]).
      group ("Service Tester - Runtime Configuration and Execution", ["com.adaptris.tester.runtime.*" , "com.adaptris.tester.runtime"]).
      group ("Service Tester - Utilities", ["com.adaptris.tester.utils.*" , "com.adaptris.tester.utils"])
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet", "com.adaptris.taglet.JUnitTaglet", "com.adaptris.taglet.ServiceTestTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addBooleanOption "-no-module-directories", true
    exclude "com/adaptris/taglet/**"
    options.addStringOption "umlBasePath", destinationDir.getCanonicalPath()
    options.addStringOption "umlImageFormat", "SVG"
    options.addStringOption "umlExcludedReferences", "java.lang.Exception,java.lang.Object,java.lang.Enum"
    options.addStringOption "umlIncludePrivateClasses","false"
    options.addStringOption "umlIncludePackagePrivateClasses","false"
    options.addStringOption "umlIncludeProtectedClasses","false"
    options.addStringOption "umlIncludeAbstractSuperclassMethods","false"
    options.addStringOption "umlIncludeConstructors","false"
    options.addStringOption "umlIncludePublicFields","false"
    options.addStringOption "umlIncludePackagePrivateFields","false"
    options.addStringOption "umlIncludeProtectedFields", "false"
    options.addStringOption "umlIncludeDeprecatedClasses", "false"
    options.addStringOption "umlIncludePrivateInnerClasses", "false"
    options.addStringOption "umlIncludePackagePrivateInnerClasses", "false"
    options.addStringOption "umlIncludeProtectedInnerClasses","false"
  }
}

javadoc.dependsOn offlinePackageList,umlJavadoc
processTestResources.dependsOn copyUnitTestProperties
