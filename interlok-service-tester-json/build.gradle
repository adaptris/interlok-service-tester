ext {
  componentName = "Interlok Service Tester/JSON"
  componentDesc = "JSON Assertions for service-tester"
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  jacksonVersion = "2.16.0"
  jsonOrgVersion = "20231013"
}

dependencies {
  api project(":interlok-service-tester")
  api ("org.skyscreamer:jsonassert:1.5.1") {
    exclude group: 'com.vaadin.external.google', module: 'android-json'
  }
  api ("org.json:json:$jsonOrgVersion")
  api ("com.jayway.jsonpath:json-path:2.8.0")
  // Dependency to platform/BOM
  api (platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion"))
  api ("com.fasterxml.jackson.core:jackson-databind")
  api ("com.fasterxml.jackson.core:jackson-annotations")

  // Custom service-tester taglets
  javadoc project(":interlok-service-tester")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.extensions.delombokTask
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}
artifacts {
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact sourcesJar { classifier "sources" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/pages/service-tester/service-tester-introduction")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.10.0+")
        properties.appendNode("tags", "testing,services,json")
        properties.appendNode("license", "false")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-service-tester")
        properties.appendNode("readme", "https://raw.githubusercontent.com/adaptris/interlok-service-tester/develop/README.md")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

javadoc {
  onlyIf {
    !hasGraphViz()
  }
  configure(options) {
    options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
    options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet", "com.adaptris.taglet.JUnitTaglet", "com.adaptris.taglet.ServiceTestTaglet"]
    options.tags('apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:','implNote:a:Implementation Note:')
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.addStringOption "Xdoclint:none", "-quiet"
    options.group ("Service Tester - Entry Point", ["com.adaptris.tester.runners.*" , "com.adaptris.tester.runners"]).
      group ("Service Tester - Report Configuration and Creation", ["com.adaptris.tester.report.junit.*" , "com.adaptris.tester.report.junit"]).
      group ("Service Tester - Runtime Configuration and Execution", ["com.adaptris.tester.runtime.*" , "com.adaptris.tester.runtime"]).
      group ("Service Tester - Utilities", ["com.adaptris.tester.utils.*" , "com.adaptris.tester.utils"])
    exclude "com/adaptris/taglet/**"
  }

}

task umlJavadoc(type: Javadoc) {
  group 'Documentation'
  description 'Build javadocs using plantuml + graphviz + umldoclet, if dot is available'

  onlyIf {
    hasGraphViz()
  }
  source = sourceSets.main.extensions.delombokTask
  classpath = project.sourceSets.main.compileClasspath
  configure(options) {
    options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
    options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
    options.docletpath = configurations.umlDoclet.files.asType(List)
    options.tags('apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:','implNote:a:Implementation Note:')
    options.doclet = "nl.talsmasoftware.umldoclet.UMLDoclet"
    options.group ("Service Tester - Entry Point", ["com.adaptris.tester.runners.*" , "com.adaptris.tester.runners"]).
      group ("Service Tester - Report Configuration and Creation", ["com.adaptris.tester.report.junit.*" , "com.adaptris.tester.report.junit"]).
      group ("Service Tester - Runtime Configuration and Execution", ["com.adaptris.tester.runtime.*" , "com.adaptris.tester.runtime"]).
      group ("Service Tester - Utilities", ["com.adaptris.tester.utils.*" , "com.adaptris.tester.utils"])
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet", "com.adaptris.taglet.JUnitTaglet", "com.adaptris.taglet.ServiceTestTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.addStringOption "Xdoclint:none", "-quiet"
    exclude "com/adaptris/taglet/**"
    // Create class & package use pages
    options.addStringOption "use"    
    options.addStringOption "umlImageFormat", "SVG"
    options.addStringOption "umlExcludedTypeReferences", "java.lang.Exception,java.lang.Object,java.lang.Enum,java.lang.annotation.Annotation"
    options.addStringOption "umlJavaBeanPropertiesAsFields"
    options.addBooleanOption "failOnCyclicPackageDependencies", false
    title= componentName
  }
}

task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + "/unit-tests.properties"), file(testResourcesDir() + "/unit-tests.properties.resolved")
  delete delombokTargetDir, "derby.log"
}

delombok {
  target = delombokTargetDir
}

clean.dependsOn deleteGeneratedFiles
javadoc.dependsOn offlinePackageList,umlJavadoc
processTestResources.dependsOn copyUnitTestProperties
